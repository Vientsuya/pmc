{"version":3,"sources":["constants.js","hooks/MemoryContext.jsx","components/RegisterValues.jsx","components/Line.jsx","components/Editor.jsx","App.jsx","index.jsx"],"names":["INITIAL_MEMORY","lineNum","stack","Array","fill","programRunning","AC","PC","getInitialMemory","Object","assign","keyWordSuggestions","MemoryContext","createContext","undefined","useMemory","context","useContext","Error","MemoryProvider","children","useState","memory","setMemory","nextPC","prevPC","getValue","at","val","Number","commands","NULL","_","__","prev","STOP","LOAD","STORE","map","el","i","JUMP","JNEG","JZERO","ADD","SUB","MULT","DIV","MOD","OR","AND","NOT","value","Provider","RegisterValues","className","Line","lineNumber","error","setError","focused","setFocused","suggestions","setSuggestions","isCurrentRunningLine","lineCountClass","inputClass","type","onFocus","onBlur","event","target","RegExp","test","disabled","onChange","newValue","toUpperCase","prevValue","updateStack","length","regex","sort","filter","v","suggestKeyword","item","onClick","Editor","lineCount","addLine","from","App","performOperation","operation","console","log","isNaN","trim","split","command","addressType","splitOperation","isDisabledLoadMemory","isDisabledPerformOperation","isDisabledRunCode","forEach","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08be063a.chunk.js","sourcesContent":["export const DEFAULT_LINES_NUMBER = 21;\r\n\r\nconst INITIAL_MEMORY = {\r\n\tlineNum: DEFAULT_LINES_NUMBER,\r\n\tstack: Array(DEFAULT_LINES_NUMBER).fill(''),\r\n\tprogramRunning: false,\r\n\tAC: 0,\r\n\tPC: 0,\r\n};\r\n\r\nexport const getInitialMemory = () => Object.assign({}, INITIAL_MEMORY);\r\n\r\nexport const keyWordSuggestions = [\r\n\t'NULL',\r\n\t'STOP',\r\n\t'LOAD',\r\n\t'STORE',\r\n\t'JUMP',\r\n\t'JNEG',\r\n\t'JZERO',\r\n\t'ADD',\r\n\t'SUB',\r\n\t'MULT',\r\n\t'DIV',\r\n\t'MOD',\r\n\t'OR',\r\n\t'AND',\r\n\t'NOT',\r\n];\r\n","import React, { createContext, useContext, useState } from 'react';\r\nimport { getInitialMemory } from '../constants';\r\n\r\nconst MemoryContext = createContext(undefined);\r\n\r\nexport const useMemory = () => {\r\n\tconst context = useContext(MemoryContext);\r\n\tif (context === undefined) {\r\n\t\tthrow new Error('useMemory must be used within a MemoryProvider');\r\n\t}\r\n\r\n\treturn context;\r\n};\r\n\r\n// add memoization, gotta split the state, make the Stack seperate\r\n// maybe each line holds its own internal state and then submit to Context for calculations etc?\r\nexport const MemoryProvider = ({ children }) => {\r\n\tconst [memory, setMemory] = useState(getInitialMemory());\r\n\r\n\tconst nextPC = prevPC => (prevPC + 1) % memory.lineNum;\r\n\r\n\tconst getValue = (at, val) => {\r\n\t\tswitch (at) {\r\n\t\t\tcase '$':\r\n\t\t\t\treturn Number(val);\r\n\t\t\tcase '@':\r\n\t\t\t\treturn Number(memory.stack[val]);\r\n\t\t\tcase '&':\r\n\t\t\t\treturn Number(memory.stack[getValue('@', val)]);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unhandled instruction \"${at}\" with value: ${val} !`);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleNULL = (_, __) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleSTOP = (_, __) => {\r\n\t\treturn 0;\r\n\t};\r\n\r\n\tconst handleLOAD = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: getValue(at, val),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleSTORE = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tstack: prev.stack.map((el, i) =>\r\n\t\t\t\ti === getValue(at, val) ? memory.AC : el\r\n\t\t\t),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleJUMP = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tPC: getValue(at, val),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleJNEG = (at, val) => {\r\n\t\tif (memory.AC < 0) {\r\n\t\t\tsetMemory(prev => ({\r\n\t\t\t\t...prev,\r\n\t\t\t\tPC: getValue(at, val),\r\n\t\t\t}));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleJZERO = (at, val) => {\r\n\t\tif (memory.AC === 0) {\r\n\t\t\tsetMemory(prev => ({\r\n\t\t\t\t...prev,\r\n\t\t\t\tPC: getValue(at, val),\r\n\t\t\t}));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleADD = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: Number(prev.AC) + getValue(at, val),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleSUB = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: Number(prev.AC) - getValue(at, val),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleMULT = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC * getValue(at, val),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleDIV = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC / getValue(at, val),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleMOD = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC % getValue(at, val),\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleOR = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC || getValue(at, val) ? 1 : 0,\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleAND = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: prev.AC && getValue(at, val) ? 1 : 0,\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleNOT = (at, val) => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tAC: getValue(at, val) ? 1 : 0,\r\n\t\t\tPC: nextPC(prev.PC),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst commands = {\r\n\t\tNULL: handleNULL,\r\n\t\tSTOP: handleSTOP,\r\n\t\tLOAD: handleLOAD,\r\n\t\tSTORE: handleSTORE,\r\n\t\tJUMP: handleJUMP,\r\n\t\tJNEG: handleJNEG,\r\n\t\tJZERO: handleJZERO,\r\n\t\tADD: handleADD,\r\n\t\tSUB: handleSUB,\r\n\t\tMULT: handleMULT,\r\n\t\tDIV: handleDIV,\r\n\t\tMOD: handleMOD,\r\n\t\tOR: handleOR,\r\n\t\tAND: handleAND,\r\n\t\tNOT: handleNOT,\r\n\t};\r\n\r\n\tconst value = { memory, setMemory, commands };\r\n\r\n\treturn (\r\n\t\t<MemoryContext.Provider value={value}>{children}</MemoryContext.Provider>\r\n\t);\r\n};\r\n","import { useMemory } from '../hooks/MemoryContext';\r\n\r\nconst RegisterValues = () => {\r\n\tconst { memory } = useMemory();\r\n\treturn (\r\n\t\t<div className=\"register-values\">\r\n\t\t\t<span>AC: {memory.AC}</span>\r\n\t\t\t<span>PC: {memory.PC}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RegisterValues;\r\n","import { useState } from 'react';\r\nimport { useMemory } from '../hooks/MemoryContext';\r\nimport { keyWordSuggestions } from '../constants';\r\n\r\nconst validateLine = value => {\r\n\tif (value === '') return '';\r\n\tif (!RegExp(/[\\w]+ [$@&]+ \\d+/).test(value)) return 'Invalid Format';\r\n\t// add some more cases\r\n\r\n\t// try to split args for commands format and validate them seperately here\r\n\r\n\treturn '';\r\n};\r\n\r\nconst Line = ({ lineNumber }) => {\r\n\tconst { memory, setMemory } = useMemory();\r\n\tconst [error, setError] = useState('');\r\n\tconst [focused, setFocused] = useState(false);\r\n\tconst [suggestions, setSuggestions] = useState([]);\r\n\r\n\tconst updateStack = event => {\r\n\t\tconst newValue = event.target.value.toUpperCase();\r\n\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tstack: prev.stack.map((prevValue, i) =>\r\n\t\t\t\ti === lineNumber ? newValue : prevValue\r\n\t\t\t),\r\n\t\t}));\r\n\t};\r\n\r\n\tconst suggestKeyword = event => {\r\n\t\tconst value = event.target.value;\r\n\t\tlet suggestions = [];\r\n\t\tif (value.length > 0) {\r\n\t\t\tconst regex = new RegExp(`^${value}`, 'i');\r\n\t\t\tsuggestions = keyWordSuggestions.sort().filter(v => regex.test(v));\r\n\t\t}\r\n\t\tsetSuggestions(suggestions);\r\n\t};\r\n\r\n\tconst suggestionSelected = value => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tstack: prev.stack.map((el, i) => (lineNumber === i ? value : el)),\r\n\t\t}));\r\n\t\tsetSuggestions([]);\r\n\t};\r\n\r\n\tconst renderSuggestions = () => {\r\n\t\tif (suggestions.length === 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<ul>\r\n\t\t\t\t{suggestions.map((item, i) => (\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"suggestion\"\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tonClick={() => suggestionSelected(item)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{item}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t);\r\n\t};\r\n\r\n\tconst handleChange = event => {\r\n\t\tupdateStack(event);\r\n\t\tsuggestKeyword(event);\r\n\t};\r\n\r\n\tconst handleFocus = () => {\r\n\t\tsetFocused(true);\r\n\t};\r\n\r\n\tconst handleBlur = event => {\r\n\t\tsetFocused(false);\r\n\t\tsetError(validateLine(event.target.value));\r\n\t};\r\n\r\n\tconst isCurrentRunningLine =\r\n\t\tlineNumber === memory.PC && memory.programRunning;\r\n\r\n\tconst lineCountClass = isCurrentRunningLine\r\n\t\t? 'current-line-num'\r\n\t\t: 'line-count-num';\r\n\tconst inputClass = isCurrentRunningLine ? 'current-line-input' : '';\r\n\r\n\treturn (\r\n\t\t<div className=\"line\">\r\n\t\t\t<div className={`${lineCountClass} ${focused ? 'focused-line' : ''}`}>\r\n\t\t\t\t{lineNumber}.\r\n\t\t\t</div>\r\n\t\t\t<div className=\"auto-complete-text-box\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={`${inputClass} ${error ? 'input-error' : ''}`}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonFocus={handleFocus}\r\n\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t\tdisabled={memory.programRunning}\r\n\t\t\t\t\tvalue={memory.stack[lineNumber]}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"suggestion-box\">{renderSuggestions()}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Line;\r\n","import RegisterValues from './RegisterValues';\r\nimport Line from './Line';\r\n\r\nconst Editor = ({ lineCount, addLine }) => {\r\n\treturn (\r\n\t\t<div className=\"editor\">\r\n\t\t\t<RegisterValues />\r\n\t\t\t<div className=\"line-container\">\r\n\t\t\t\t{Array.from({ length: lineCount }, (_, i) => (\r\n\t\t\t\t\t<Line key={i} lineNumber={i} />\r\n\t\t\t\t))}\r\n\t\t\t\t<div className=\"add-line\" onClick={() => addLine()}>\r\n\t\t\t\t\tDodaj Linię\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Editor;\r\n","import Editor from './components/Editor';\r\nimport { getInitialMemory } from './constants';\r\nimport { useMemory } from './hooks/MemoryContext';\r\nimport './index.css';\r\n\r\nconst splitOperation = operation => {\r\n\t//extract the logic here\r\n\tconst [command, addressType, value] = operation.trim().split(' ');\r\n\r\n\tconsole.log({ command, addressType, value });\r\n\r\n\treturn { command, addressType, value };\r\n};\r\n\r\nconst App = () => {\r\n\tconst { memory, setMemory, commands } = useMemory();\r\n\r\n\tconst resetMemory = () => {\r\n\t\tsetMemory(getInitialMemory());\r\n\t};\r\n\r\n\tconst loadMemory = () => {\r\n\t\tconsole.log(memory);\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tprogramRunning: true,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst performOperation = operation => {\r\n\t\tconsole.log(`[${memory.PC}]: `, { operation });\r\n\t\tif (!operation || !isNaN(operation)) {\r\n\t\t\treturn commands.NULL(null, null);\r\n\t\t}\r\n\r\n\t\tconst { command, addressType, value } = splitOperation(operation);\r\n\r\n\t\tif (!(command in commands)) throw new Error(`Unknown command \"${command}\"`);\r\n\t\treturn commands[command.toUpperCase()](addressType, value);\r\n\t};\r\n\r\n\tconst runCode = () => {\r\n\t\t// const operation = memory.stack[memory.PC];\r\n\t\tmemory.stack.forEach(operation => {\r\n\t\t\tperformOperation(operation);\r\n\t\t});\r\n\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tprogramRunning: false,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst addLine = () => {\r\n\t\tsetMemory(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tstack: [...prev.stack, ''],\r\n\t\t\tlineNum: prev.lineNum + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tconst isDisabledLoadMemory = memory.programRunning; // || memory.stack.some(line => line.error);\r\n\tconst isDisabledPerformOperation = !memory.programRunning;\r\n\tconst isDisabledRunCode = !memory.programRunning || memory.PC !== 0;\r\n\r\n\treturn (\r\n\t\t<div className=\"main-container\">\r\n\t\t\t<Editor lineCount={memory.lineNum} addLine={addLine} />\r\n\t\t\t<div className=\"button-box\">\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"run-program\"\r\n\t\t\t\t\tdisabled={isDisabledLoadMemory}\r\n\t\t\t\t\tonClick={loadMemory}\r\n\t\t\t\t>\r\n\t\t\t\t\tZAŁADUJ DO PAMIĘCI\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tdisabled={isDisabledPerformOperation}\r\n\t\t\t\t\tonClick={() => performOperation(memory.stack[memory.PC])}\r\n\t\t\t\t>\r\n\t\t\t\t\tWYKONAJ INSTRUKCJE\r\n\t\t\t\t</button>\r\n\t\t\t\t<button disabled={isDisabledRunCode} onClick={runCode}>\r\n\t\t\t\t\tWYKONAJ CAŁY PROGRAM\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={resetMemory}>RESET</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { MemoryProvider } from './hooks/MemoryContext';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<MemoryProvider>\r\n\t\t\t<App />\r\n\t\t</MemoryProvider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}